cmake_minimum_required(VERSION 3.10)
project(JetpackClient CXX)

set(CMAKE_CXX_STANDARD 17)  # Définit le standard C++

# Configuration spécifique au système d'exploitation
if(UNIX)
    set(CMAKE_CXX_FLAGS "-Wall -Wextra -Werror")
    # Ne force pas l'utilisation de clang sur Windows
    if(NOT CMAKE_CXX_COMPILER)
        set(CMAKE_CXX_COMPILER "clang++")
    endif()
elseif(WIN32)
    # Configuration pour Windows
    add_definitions(-D_WIN32_WINNT=0x0601)  # Windows 7 ou plus récent
    
    # Désactiver les avertissements spécifiques à Windows
    if(MSVC)
        add_compile_options(/W4 /wd4996)
        add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    endif()
endif()

# Recherche la bibliothèque SFML
find_package(SFML 2.5 COMPONENTS graphics window system REQUIRED)

# Ajoute les fichiers source
add_executable(jetpack_client
    main.cpp
    gamestate.cpp
    graphics/graphics.cpp
    graphics/renderer.cpp
    graphics/input_handler.cpp
    network/network.cpp
    network/protocol_handlers.cpp
    debug/debug.cpp
)

# Inclut les répertoires
include_directories(${CMAKE_CURRENT_SOURCE_DIR})

# Lie la bibliothèque SFML
target_link_libraries(jetpack_client sfml-graphics sfml-window sfml-system)

# Ajoute pthread uniquement sur Unix
if(UNIX)
    target_link_libraries(jetpack_client pthread)
endif()

# Copie les assets dans le répertoire de build pour Windows
if(WIN32)
    add_custom_command(TARGET jetpack_client POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${CMAKE_SOURCE_DIR}/../assets $<TARGET_FILE_DIR:jetpack_client>/assets
    )
endif()